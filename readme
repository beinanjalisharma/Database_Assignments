//payment componnt
// payment.component.ts
import { Component, OnInit } from '@angular/core';
import { OrderService, OrderData } from '../services/order.service';

@Component({
  selector: 'app-payment',
  templateUrl: './payment.component.html',
  styleUrls: ['./payment.component.css']
})
export class PaymentComponent implements OnInit {
  subtotal: number = 1200;
  discount: number = 0;
  total: number = this.subtotal;
  paymentMethod: string = 'cod'; // Default to Cash on Delivery
  couponCode: string = '';
  couponApplied: boolean = false;
  couponError: string = '';
  isLoading: boolean = false;
  orderSuccess: boolean = false;
  orderError: string = '';

  readonly VALID_COUPON: string = 'Anjali15';
  readonly DISCOUNT_PERCENT: number = 15;

  constructor(private orderService: OrderService) { }

  ngOnInit(): void {
    this.calculateTotal();
  }

  calculateTotal(): void {
    this.total = this.subtotal - this.discount;
  }

  handleCouponSubmit(): void {
    if (this.couponCode.trim() === this.VALID_COUPON) {
      if (!this.couponApplied) {
        const discountAmount = (this.subtotal * this.DISCOUNT_PERCENT) / 100;
        this.discount = discountAmount;
        this.couponApplied = true;
        this.couponError = '';
        this.calculateTotal();
      }
    } else {
      this.couponError = 'Invalid coupon code';
    }
  }

  removeCoupon(): void {
    this.couponCode = '';
    this.couponApplied = false;
    this.discount = 0;
    this.couponError = '';
    this.calculateTotal();
  }

  /**
   * Method to place the order
   */
  placeOrder(): void {
    this.isLoading = true;
    this.orderError = '';
    
    // Prepare the order data
    const orderData: OrderData = {
      subtotal: this.subtotal,
      discount: this.discount,
      total: this.total,
      paymentMethod: this.paymentMethod,
      couponApplied: this.couponApplied,
      couponCode: this.couponApplied ? this.couponCode : undefined
    };
    
    // Call the order service
    this.orderService.placeOrder(orderData)
      .subscribe({
        next: (response) => {
          this.isLoading = false;
          this.orderSuccess = true;
          console.log('Order placed successfully', response);
          // You can handle redirects here, e.g., to an order confirmation page
        },
        error: (error) => {
          this.isLoading = false;
          this.orderError = 'Failed to place your order. Please try again.';
          console.error('Order placement failed', error);
        }
      });
  }
}




//payment component.html

<!-- payment.component.html -->
<div class="payment-container">
  <h2 class="payment-title">Payment Details</h2>
  
  <!-- Order Summary -->
  <div class="order-summary">
    <h3>Order Summary</h3>
    <div class="summary-row">
      <span>Subtotal</span>
      <span>₹{{ subtotal.toFixed(2) }}</span>
    </div>
    
    <div *ngIf="couponApplied" class="summary-row discount">
      <span>Discount ({{ DISCOUNT_PERCENT }}%)</span>
      <span>- ₹{{ discount.toFixed(2) }}</span>
    </div>
    
    <div class="summary-row total">
      <span>Total</span>
      <span>₹{{ total.toFixed(2) }}</span>
    </div>
  </div>
  
  <!-- Coupon Section -->
  <div class="coupon-section">
    <h3>Have a Coupon?</h3>
    <div class="coupon-input-container">
      <input 
        type="text" 
        [(ngModel)]="couponCode" 
        [disabled]="couponApplied || isLoading" 
        placeholder="Enter coupon code"
        class="coupon-input"
      />
      <button 
        *ngIf="!couponApplied" 
        (click)="handleCouponSubmit()" 
        [disabled]="isLoading"
        class="apply-button"
      >
        Apply
      </button>
      <button 
        *ngIf="couponApplied" 
        (click)="removeCoupon()" 
        [disabled]="isLoading"
        class="remove-button"
      >
        Remove
      </button>
    </div>
    <p *ngIf="couponError" class="error-message">{{ couponError }}</p>
    <p *ngIf="couponApplied" class="success-message">
      Coupon "{{ VALID_COUPON }}" applied successfully!
    </p>
  </div>
  
  <!-- Payment Method - Cash on Delivery -->
  <div class="payment-methods">
    <h3>Payment Method</h3>
    <div class="cod-container">
      <div class="cod-option selected">
        <div class="payment-icon">
          <i class="fa fa-money-bill"></i>
        </div>
        <div class="cod-details">
          <span class="payment-title">Cash on Delivery</span>
          <p class="payment-description">Pay with cash when your order is delivered</p>
        </div>
      </div>
    </div>
    <div class="cod-info">
      <p><i class="fa fa-info-circle"></i> Please keep exact change ready at the time of delivery</p>
    </div>
  </div>
  
  <!-- Order Status Messages -->
  <div *ngIf="orderSuccess" class="order-success">
    <i class="fa fa-check-circle"></i>
    <p>Your order has been placed successfully!</p>
  </div>
  
  <div *ngIf="orderError" class="order-error">
    <i class="fa fa-exclamation-circle"></i>
    <p>{{ orderError }}</p>
  </div>
  
  <!-- Action Buttons -->
  <div class="action-buttons">
    <button class="back-button" [disabled]="isLoading">Go Back</button>
    <button 
      class="proceed-button" 
      [disabled]="isLoading" 
      (click)="placeOrder()"
    >
      <span *ngIf="!isLoading">Place Order</span>
      <span *ngIf="isLoading">
        <i class="fa fa-spinner fa-spin"></i> Processing...
      </span>
    </button>
  </div>
</div>






//orde success
// order-success.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-order-success',
  templateUrl: './order-success.component.html',
  styleUrls: ['./order-success.component.css']
})
export class OrderSuccessComponent implements OnInit {
  orderId: string;

  constructor(private route: ActivatedRoute) {
    this.orderId = '';
  }

  ngOnInit(): void {
    // Get the order ID from route parameters if available
    this.route.params.subscribe(params => {
      if (params['id']) {
        this.orderId = params['id'];
      }
    });
  }
}


order success.html
<!-- order-success.component.html -->
<div class="success-container">
  <div class="success-icon">
    <i class="fa fa-check-circle"></i>
  </div>
  
  <h1>Order Placed Successfully!</h1>
  
  <div *ngIf="orderId" class="order-details">
    <p>Your order <strong>#{{ orderId }}</strong> has been placed successfully.</p>
  </div>
  <div *ngIf="!orderId" class="order-details">
    <p>Your order has been placed successfully.</p>
  </div>
  
  <p class="delivery-info">
    You have chosen Cash on Delivery. Please keep the exact amount ready at the time of delivery.
  </p>
  
  <div class="cta-buttons">
    <button class="track-order-btn">Track Order</button>
    <button class="continue-shopping-btn">Continue Shopping</button>
  </div>
</div>


//orde html
/* Additional styles for order status */
.order-success {
  background-color: #e6f7ed;
  border-left: 4px solid #34a853;
  padding: 16px;
  margin-bottom: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
}

.order-success i {
  color: #34a853;
  font-size: 24px;
  margin-right: 12px;
}

.order-success p {
  margin: 0;
  color: #2e7d32;
}

.order-error {
  background-color: #fdeded;
  border-left: 4px solid #ea4335;
  padding: 16px;
  margin-bottom: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
}

.order-error i {
  color: #ea4335;
  font-size: 24px;
  margin-right: 12px;
}

.order-error p {
  margin: 0;
  color: #c62828;
}

/* Disable styling for buttons */
button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* Spinner animation */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
